/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*
 * Copyright (c) 2016-2019 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Component, Input, HostBinding } from '@angular/core';
import { isBooleanAttributeSet } from '../../utils/component/is-boolean-attribute-set';
export class ClrProgressBar {
    constructor() {
        this.externalId = '';
        // Progress
        this.max = 100;
        this.value = 0;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set id(value) {
        this._ID = value;
        this.externalId = null;
    }
    /**
     * @return {?}
     */
    get id() {
        return this._ID;
    }
    // Styles
    /**
     * @return {?}
     */
    get progressClass() {
        return true;
    }
    /**
     * @return {?}
     */
    get labeledClass() {
        return this._labeled;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set clrLabeled(value) {
        this._labeled = isBooleanAttributeSet(value);
    }
    /**
     * @return {?}
     */
    get fadeClass() {
        return this._fade;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set clrFade(value) {
        this._fade = isBooleanAttributeSet(value);
    }
    /**
     * @return {?}
     */
    get loopClass() {
        return this._loop;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set clrLoop(value) {
        this._loop = isBooleanAttributeSet(value);
    }
    /**
     * @return {?}
     */
    get successClass() {
        return this._success;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set clrSuccess(value) {
        this._success = isBooleanAttributeSet(value);
    }
    /**
     * @return {?}
     */
    get dangerClass() {
        return this._danger;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set clrDanger(value) {
        this._danger = isBooleanAttributeSet(value);
    }
    /**
     * @return {?}
     */
    get flashClass() {
        return this._flash;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set clrFlash(value) {
        this._flash = isBooleanAttributeSet(value);
    }
    /**
     * @return {?}
     */
    get flashDangerClass() {
        return this._flashDanger;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set clrFlashDanger(value) {
        this._flashDanger = isBooleanAttributeSet(value);
    }
    /**
     * Make sure that we always will have something that is readable
     * for the screen reader
     * @return {?}
     */
    get displayValue() {
        if (this.displayval) {
            return this.displayval;
        }
        return `${this.value}%`;
    }
    /**
     * Display aria-live only when there is value and it's not 0 or equal to the max value
     * @return {?}
     */
    displayAriaLive() {
        return (this.value !== undefined || this.value !== 0) && this.value !== this.max;
    }
    /**
     * @return {?}
     */
    get ariaLive() {
        if (isBooleanAttributeSet(this.assertive)) {
            return 'assertive';
        }
        if (isBooleanAttributeSet(this.off)) {
            return 'off';
        }
        return 'polite';
    }
}
ClrProgressBar.decorators = [
    { type: Component, args: [{
                selector: 'clr-progress-bar',
                template: `
    <progress [id]="id" [attr.max]="max" [attr.value]="value" [attr.data-displayval]="displayValue"></progress>
    <span *ngIf="displayAriaLive()" [attr.aria-live]="ariaLive">{{ displayValue }}</span>
  `
            }] }
];
ClrProgressBar.propDecorators = {
    externalId: [{ type: HostBinding, args: ['attr.id',] }],
    id: [{ type: Input }],
    max: [{ type: Input, args: ['clrMax',] }],
    value: [{ type: Input, args: ['clrValue',] }],
    displayval: [{ type: Input, args: ['clrDisplayval',] }],
    progressClass: [{ type: HostBinding, args: ['class.progress',] }],
    labeledClass: [{ type: HostBinding, args: ['class.labeled',] }],
    clrLabeled: [{ type: Input, args: ['clrLabeled',] }],
    fadeClass: [{ type: HostBinding, args: ['class.progress-fade',] }],
    clrFade: [{ type: Input, args: ['clrFade',] }],
    loopClass: [{ type: HostBinding, args: ['class.loop',] }],
    clrLoop: [{ type: Input, args: ['clrLoop',] }],
    successClass: [{ type: HostBinding, args: ['class.success',] }],
    clrSuccess: [{ type: Input, args: ['clrSuccess',] }],
    dangerClass: [{ type: HostBinding, args: ['class.danger',] }],
    clrDanger: [{ type: Input, args: ['clrDanger',] }],
    flashClass: [{ type: HostBinding, args: ['class.flash',] }],
    clrFlash: [{ type: Input, args: ['clrFlash',] }],
    flashDangerClass: [{ type: HostBinding, args: ['class.flash-danger',] }],
    clrFlashDanger: [{ type: Input, args: ['clrFlashDanger',] }],
    assertive: [{ type: Input, args: ['clrAssertive',] }],
    off: [{ type: Input, args: ['clrOff',] }]
};
if (false) {
    /**
     * Handle component ID
     * @type {?}
     */
    ClrProgressBar.prototype._ID;
    /** @type {?} */
    ClrProgressBar.prototype.externalId;
    /** @type {?} */
    ClrProgressBar.prototype.max;
    /** @type {?} */
    ClrProgressBar.prototype.value;
    /** @type {?} */
    ClrProgressBar.prototype.displayval;
    /** @type {?} */
    ClrProgressBar.prototype._labeled;
    /** @type {?} */
    ClrProgressBar.prototype._fade;
    /** @type {?} */
    ClrProgressBar.prototype._loop;
    /** @type {?} */
    ClrProgressBar.prototype._success;
    /** @type {?} */
    ClrProgressBar.prototype._danger;
    /** @type {?} */
    ClrProgressBar.prototype._flash;
    /** @type {?} */
    ClrProgressBar.prototype._flashDanger;
    /** @type {?} */
    ClrProgressBar.prototype.assertive;
    /** @type {?} */
    ClrProgressBar.prototype.off;
}
//# sourceMappingURL=data:application/json;base64,