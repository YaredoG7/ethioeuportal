/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*
 * Copyright (c) 2016-2019 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Injectable, Optional, Renderer2, SkipSelf } from '@angular/core';
import { isObservable, of } from 'rxjs';
import { ArrowKeyDirection } from './arrow-key-direction.enum';
var FocusService = /** @class */ (function () {
    function FocusService(renderer) {
        this.renderer = renderer;
        this._unlistenFuncs = [];
    }
    Object.defineProperty(FocusService.prototype, "current", {
        get: /**
         * @return {?}
         */
        function () {
            return this._current;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} first
     * @return {?}
     */
    FocusService.prototype.reset = /**
     * @param {?} first
     * @return {?}
     */
    function (first) {
        this._current = first;
    };
    /**
     * @param {?} el
     * @return {?}
     */
    FocusService.prototype.listenToArrowKeys = /**
     * @param {?} el
     * @return {?}
     */
    function (el) {
        var _this = this;
        // The following listeners return false when there was an action to take for the key pressed,
        // in order to prevent the default behavior of that key.
        this._unlistenFuncs.push(this.renderer.listen(el, 'keydown.arrowup', function (event) { return !_this.move(ArrowKeyDirection.UP, event); }));
        this._unlistenFuncs.push(this.renderer.listen(el, 'keydown.arrowdown', function (event) { return !_this.move(ArrowKeyDirection.DOWN, event); }));
        this._unlistenFuncs.push(this.renderer.listen(el, 'keydown.arrowleft', function (event) { return !_this.move(ArrowKeyDirection.LEFT, event); }));
        this._unlistenFuncs.push(this.renderer.listen(el, 'keydown.arrowright', function (event) { return !_this.move(ArrowKeyDirection.RIGHT, event); }));
    };
    /**
     * @param {?} el
     * @return {?}
     */
    FocusService.prototype.registerContainer = /**
     * @param {?} el
     * @return {?}
     */
    function (el) {
        var _this = this;
        this.renderer.setAttribute(el, 'tabindex', '0');
        this.listenToArrowKeys(el);
        // The following listeners return false when there was an action to take for the key pressed,
        // in order to prevent the default behavior of that key.
        this._unlistenFuncs.push(this.renderer.listen(el, 'keydown.space', function () { return !_this.activateCurrent(); }));
        this._unlistenFuncs.push(this.renderer.listen(el, 'keydown.enter', function () { return !_this.activateCurrent(); }));
    };
    /**
     * @param {?} item
     * @return {?}
     */
    FocusService.prototype.moveTo = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        if (this.current) {
            this.current.blur();
        }
        item.focus();
        this._current = item;
    };
    /**
     * @param {?} direction
     * @param {?=} event
     * @return {?}
     */
    FocusService.prototype.move = /**
     * @param {?} direction
     * @param {?=} event
     * @return {?}
     */
    function (direction, event) {
        var _this = this;
        if (event === void 0) { event = undefined; }
        if (this.current) {
            // We want to prevent default behavior that results from the keydown,
            // which may undesirably move the cursor around when using a screen reader
            if (event) {
                event.preventDefault();
            }
            /** @type {?} */
            var next = this.current[direction];
            if (next) {
                // Turning the value into an Observable isn't great, but it's the fastest way to avoid code duplication.
                // If performance ever matters for this, we can refactor using additional private methods.
                /** @type {?} */
                var nextObs = isObservable(next) ? next : of(next);
                nextObs.subscribe(function (item) {
                    _this.moveTo(item);
                    return true;
                });
            }
        }
        return false;
    };
    /**
     * @return {?}
     */
    FocusService.prototype.activateCurrent = /**
     * @return {?}
     */
    function () {
        if (this.current && this.current.activate) {
            this.current.activate();
            return true;
        }
        return false;
    };
    /**
     * @return {?}
     */
    FocusService.prototype.detachListeners = /**
     * @return {?}
     */
    function () {
        this._unlistenFuncs.forEach(function (unlisten) { return unlisten(); });
    };
    FocusService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    FocusService.ctorParameters = function () { return [
        { type: Renderer2 }
    ]; };
    return FocusService;
}());
export { FocusService };
if (false) {
    /** @type {?} */
    FocusService.prototype._unlistenFuncs;
    /** @type {?} */
    FocusService.prototype._current;
    /** @type {?} */
    FocusService.prototype.renderer;
}
/**
 * @param {?} existing
 * @param {?} renderer
 * @return {?}
 */
export function clrFocusServiceFactory(existing, renderer) {
    return existing || new FocusService(renderer);
}
/** @type {?} */
export var FOCUS_SERVICE_PROVIDER = {
    provide: FocusService,
    useFactory: clrFocusServiceFactory,
    deps: [[new Optional(), new SkipSelf(), FocusService], Renderer2],
};
//# sourceMappingURL=data:application/json;base64,