/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*
 * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Injectable } from '@angular/core';
import { commonStringsDefault } from './common-strings.default';
import * as i0 from "@angular/core";
var ClrCommonStringsService = /** @class */ (function () {
    function ClrCommonStringsService() {
        this._strings = commonStringsDefault;
    }
    /**
     * Allows you to pass in new overrides for localization
     */
    /**
     * Allows you to pass in new overrides for localization
     * @param {?} overrides
     * @return {?}
     */
    ClrCommonStringsService.prototype.localize = /**
     * Allows you to pass in new overrides for localization
     * @param {?} overrides
     * @return {?}
     */
    function (overrides) {
        this._strings = tslib_1.__assign({}, this._strings, overrides);
    };
    Object.defineProperty(ClrCommonStringsService.prototype, "keys", {
        /**
         * Access to all of the keys as strings
         */
        get: /**
         * Access to all of the keys as strings
         * @return {?}
         */
        function () {
            return this._strings;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Parse a string with a set of tokens to replace
     */
    /**
     * Parse a string with a set of tokens to replace
     * @param {?} source
     * @param {?=} tokens
     * @return {?}
     */
    ClrCommonStringsService.prototype.parse = /**
     * Parse a string with a set of tokens to replace
     * @param {?} source
     * @param {?=} tokens
     * @return {?}
     */
    function (source, tokens) {
        if (tokens === void 0) { tokens = {}; }
        /** @type {?} */
        var names = Object.keys(tokens);
        /** @type {?} */
        var output = source;
        if (names.length) {
            names.forEach(function (name) {
                output = output.replace("{" + name + "}", tokens[name]);
            });
        }
        return output;
    };
    ClrCommonStringsService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    /** @nocollapse */ ClrCommonStringsService.ngInjectableDef = i0.defineInjectable({ factory: function ClrCommonStringsService_Factory() { return new ClrCommonStringsService(); }, token: ClrCommonStringsService, providedIn: "root" });
    return ClrCommonStringsService;
}());
export { ClrCommonStringsService };
if (false) {
    /** @type {?} */
    ClrCommonStringsService.prototype._strings;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbW9uLXN0cmluZ3Muc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjbHIvYW5ndWxhci8iLCJzb3VyY2VzIjpbInV0aWxzL2kxOG4vY29tbW9uLXN0cmluZ3Muc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBS0EsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUczQyxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQzs7QUFFaEU7SUFBQTtRQUlVLGFBQVEsR0FBRyxvQkFBb0IsQ0FBQztLQTZCekM7SUEzQkM7O09BRUc7Ozs7OztJQUNILDBDQUFROzs7OztJQUFSLFVBQVMsU0FBMkI7UUFDbEMsSUFBSSxDQUFDLFFBQVEsd0JBQVEsSUFBSSxDQUFDLFFBQVEsRUFBSyxTQUFTLENBQUUsQ0FBQztJQUNyRCxDQUFDO0lBS0Qsc0JBQUkseUNBQUk7UUFIUjs7V0FFRzs7Ozs7UUFDSDtZQUNFLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUN2QixDQUFDOzs7T0FBQTtJQUVEOztPQUVHOzs7Ozs7O0lBQ0gsdUNBQUs7Ozs7OztJQUFMLFVBQU0sTUFBYyxFQUFFLE1BQXNDO1FBQXRDLHVCQUFBLEVBQUEsV0FBc0M7O1lBQ3BELEtBQUssR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQzs7WUFDN0IsTUFBTSxHQUFHLE1BQU07UUFDbkIsSUFBSSxLQUFLLENBQUMsTUFBTSxFQUFFO1lBQ2hCLEtBQUssQ0FBQyxPQUFPLENBQUMsVUFBQSxJQUFJO2dCQUNoQixNQUFNLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFJLElBQUksTUFBRyxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ3JELENBQUMsQ0FBQyxDQUFDO1NBQ0o7UUFDRCxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDOztnQkFoQ0YsVUFBVSxTQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQjs7O2tDQVpEO0NBMkNDLEFBakNELElBaUNDO1NBOUJZLHVCQUF1Qjs7O0lBQ2xDLDJDQUF3QyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTYtMjAxOCBWTXdhcmUsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIFRoaXMgc29mdHdhcmUgaXMgcmVsZWFzZWQgdW5kZXIgTUlUIGxpY2Vuc2UuXG4gKiBUaGUgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uIGNhbiBiZSBmb3VuZCBpbiBMSUNFTlNFIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHByb2plY3QuXG4gKi9cbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgQ2xyQ29tbW9uU3RyaW5ncyB9IGZyb20gJy4vY29tbW9uLXN0cmluZ3MuaW50ZXJmYWNlJztcbmltcG9ydCB7IGNvbW1vblN0cmluZ3NEZWZhdWx0IH0gZnJvbSAnLi9jb21tb24tc3RyaW5ncy5kZWZhdWx0JztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCcsXG59KVxuZXhwb3J0IGNsYXNzIENsckNvbW1vblN0cmluZ3NTZXJ2aWNlIHtcbiAgcHJpdmF0ZSBfc3RyaW5ncyA9IGNvbW1vblN0cmluZ3NEZWZhdWx0O1xuXG4gIC8qKlxuICAgKiBBbGxvd3MgeW91IHRvIHBhc3MgaW4gbmV3IG92ZXJyaWRlcyBmb3IgbG9jYWxpemF0aW9uXG4gICAqL1xuICBsb2NhbGl6ZShvdmVycmlkZXM6IENsckNvbW1vblN0cmluZ3MpIHtcbiAgICB0aGlzLl9zdHJpbmdzID0geyAuLi50aGlzLl9zdHJpbmdzLCAuLi5vdmVycmlkZXMgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBY2Nlc3MgdG8gYWxsIG9mIHRoZSBrZXlzIGFzIHN0cmluZ3NcbiAgICovXG4gIGdldCBrZXlzKCk6IFJlYWRvbmx5PENsckNvbW1vblN0cmluZ3M+IHtcbiAgICByZXR1cm4gdGhpcy5fc3RyaW5ncztcbiAgfVxuXG4gIC8qKlxuICAgKiBQYXJzZSBhIHN0cmluZyB3aXRoIGEgc2V0IG9mIHRva2VucyB0byByZXBsYWNlXG4gICAqL1xuICBwYXJzZShzb3VyY2U6IHN0cmluZywgdG9rZW5zOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9ID0ge30pIHtcbiAgICBjb25zdCBuYW1lcyA9IE9iamVjdC5rZXlzKHRva2Vucyk7XG4gICAgbGV0IG91dHB1dCA9IHNvdXJjZTtcbiAgICBpZiAobmFtZXMubGVuZ3RoKSB7XG4gICAgICBuYW1lcy5mb3JFYWNoKG5hbWUgPT4ge1xuICAgICAgICBvdXRwdXQgPSBvdXRwdXQucmVwbGFjZShgeyR7bmFtZX19YCwgdG9rZW5zW25hbWVdKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gb3V0cHV0O1xuICB9XG59XG4iXX0=