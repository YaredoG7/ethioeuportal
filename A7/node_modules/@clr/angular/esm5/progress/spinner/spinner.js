/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*
 * Copyright (c) 2016-2019 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Component, Input, HostBinding } from '@angular/core';
import { isBooleanAttributeSet } from '../../utils/component/is-boolean-attribute-set';
var ClrSpinner = /** @class */ (function () {
    function ClrSpinner() {
    }
    Object.defineProperty(ClrSpinner.prototype, "spinnerClass", {
        /**
         * Default class for all spinners. This class is always true
         */
        get: /**
         * Default class for all spinners. This class is always true
         * @return {?}
         */
        function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrSpinner.prototype, "inlineClass", {
        get: /**
         * @return {?}
         */
        function () {
            return this._inline;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrSpinner.prototype, "clrInline", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._inline = isBooleanAttributeSet(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrSpinner.prototype, "inverseClass", {
        get: /**
         * @return {?}
         */
        function () {
            return this._inverse;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrSpinner.prototype, "clrInverse", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._inverse = isBooleanAttributeSet(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrSpinner.prototype, "smallClass", {
        get: /**
         * @return {?}
         */
        function () {
            return this._small;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrSpinner.prototype, "clrSmall", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._small = isBooleanAttributeSet(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrSpinner.prototype, "mediumClass", {
        get: /**
         * @return {?}
         */
        function () {
            if (this._small) {
                return false;
            }
            return this._medium;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrSpinner.prototype, "clrMedium", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._medium = isBooleanAttributeSet(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrSpinner.prototype, "setAriaLive", {
        get: /**
         * @return {?}
         */
        function () {
            if (isBooleanAttributeSet(this.assertive)) {
                return 'assertive';
            }
            if (isBooleanAttributeSet(this.off)) {
                return 'off';
            }
            return 'polite';
        },
        enumerable: true,
        configurable: true
    });
    ClrSpinner.decorators = [
        { type: Component, args: [{
                    selector: 'clr-spinner',
                    template: "\n    <ng-content></ng-content>\n  ",
                    host: {
                        '[attr.aria-live]': 'setAriaLive',
                        '[attr.aria-busy]': 'true',
                    }
                }] }
    ];
    ClrSpinner.propDecorators = {
        spinnerClass: [{ type: HostBinding, args: ['class.spinner',] }],
        inlineClass: [{ type: HostBinding, args: ['class.spinner-inline',] }],
        clrInline: [{ type: Input, args: ['clrInline',] }],
        inverseClass: [{ type: HostBinding, args: ['class.spinner-inverse',] }],
        clrInverse: [{ type: Input, args: ['clrInverse',] }],
        smallClass: [{ type: HostBinding, args: ['class.spinner-sm',] }],
        clrSmall: [{ type: Input, args: ['clrSmall',] }],
        mediumClass: [{ type: HostBinding, args: ['class.spinner-md',] }],
        clrMedium: [{ type: Input, args: ['clrMedium',] }],
        assertive: [{ type: Input, args: ['clrAssertive',] }],
        off: [{ type: Input, args: ['clrOff',] }]
    };
    return ClrSpinner;
}());
export { ClrSpinner };
if (false) {
    /** @type {?} */
    ClrSpinner.prototype._inline;
    /** @type {?} */
    ClrSpinner.prototype._inverse;
    /**
     * Small
     * @type {?}
     */
    ClrSpinner.prototype._small;
    /**
     * When clrSmall & clrMedium are set both to true.
     * The CSS with high priority will be small - so medium size will be ignored.
     *
     * For this reason if clrSmall is set we won't add clrMedium class.
     *
     * NOTE: This is dictated by the CSS rules.
     * DON'T USE clrSmall & clrMedium to toggle classes. This could change without notice.
     *
     * Also there is no logical need to have both of them set to TRUE or FALSE.
     * @type {?}
     */
    ClrSpinner.prototype._medium;
    /**
     * By default aria-live will be set to `polite` .
     * To change is it you need to set clrAssertive or clrOff to TRUE
     *
     * There is priority:
     *   Default: polite
     *   Asertive
     *   Off
     *
     * In case when for some reason you have clrAssertive=TRUE and clrOff=TRUE,
     * we gonna set `assertive` as value of aria-live.
     *
     * @type {?}
     */
    ClrSpinner.prototype.assertive;
    /** @type {?} */
    ClrSpinner.prototype.off;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Bpbm5lci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjbHIvYW5ndWxhci8iLCJzb3VyY2VzIjpbInByb2dyZXNzL3NwaW5uZXIvc3Bpbm5lci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFLQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sZ0RBQWdELENBQUM7QUFFdkY7SUFBQTtJQWtIQSxDQUFDO0lBcEdDLHNCQUNJLG9DQUFZO1FBSmhCOztXQUVHOzs7OztRQUNIO1lBRUUsT0FBTyxJQUFJLENBQUM7UUFDZCxDQUFDOzs7T0FBQTtJQUlELHNCQUNJLG1DQUFXOzs7O1FBRGY7WUFFRSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7UUFDdEIsQ0FBQzs7O09BQUE7SUFFRCxzQkFDSSxpQ0FBUzs7Ozs7UUFEYixVQUNjLEtBQXVCO1lBQ25DLElBQUksQ0FBQyxPQUFPLEdBQUcscUJBQXFCLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDOUMsQ0FBQzs7O09BQUE7SUFHRCxzQkFDSSxvQ0FBWTs7OztRQURoQjtZQUVFLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUN2QixDQUFDOzs7T0FBQTtJQUVELHNCQUNJLGtDQUFVOzs7OztRQURkLFVBQ2UsS0FBdUI7WUFDcEMsSUFBSSxDQUFDLFFBQVEsR0FBRyxxQkFBcUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMvQyxDQUFDOzs7T0FBQTtJQVlELHNCQUNJLGtDQUFVOzs7O1FBRGQ7WUFFRSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDckIsQ0FBQzs7O09BQUE7SUFFRCxzQkFDSSxnQ0FBUTs7Ozs7UUFEWixVQUNhLEtBQXVCO1lBQ2xDLElBQUksQ0FBQyxNQUFNLEdBQUcscUJBQXFCLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDN0MsQ0FBQzs7O09BQUE7SUFjRCxzQkFDSSxtQ0FBVzs7OztRQURmO1lBRUUsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO2dCQUNmLE9BQU8sS0FBSyxDQUFDO2FBQ2Q7WUFDRCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7UUFDdEIsQ0FBQzs7O09BQUE7SUFFRCxzQkFDSSxpQ0FBUzs7Ozs7UUFEYixVQUNjLEtBQXVCO1lBQ25DLElBQUksQ0FBQyxPQUFPLEdBQUcscUJBQXFCLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDOUMsQ0FBQzs7O09BQUE7SUFvQkQsc0JBQUksbUNBQVc7Ozs7UUFBZjtZQUNFLElBQUkscUJBQXFCLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFO2dCQUN6QyxPQUFPLFdBQVcsQ0FBQzthQUNwQjtZQUNELElBQUkscUJBQXFCLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFO2dCQUNuQyxPQUFPLEtBQUssQ0FBQzthQUNkO1lBQ0QsT0FBTyxRQUFRLENBQUM7UUFDbEIsQ0FBQzs7O09BQUE7O2dCQWpIRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLGFBQWE7b0JBQ3ZCLFFBQVEsRUFBRSxxQ0FFVDtvQkFDRCxJQUFJLEVBQUU7d0JBQ0osa0JBQWtCLEVBQUUsYUFBYTt3QkFDakMsa0JBQWtCLEVBQUUsTUFBTTtxQkFDM0I7aUJBQ0Y7OzsrQkFLRSxXQUFXLFNBQUMsZUFBZTs4QkFPM0IsV0FBVyxTQUFDLHNCQUFzQjs0QkFLbEMsS0FBSyxTQUFDLFdBQVc7K0JBTWpCLFdBQVcsU0FBQyx1QkFBdUI7NkJBS25DLEtBQUssU0FBQyxZQUFZOzZCQWVsQixXQUFXLFNBQUMsa0JBQWtCOzJCQUs5QixLQUFLLFNBQUMsVUFBVTs4QkFpQmhCLFdBQVcsU0FBQyxrQkFBa0I7NEJBUTlCLEtBQUssU0FBQyxXQUFXOzRCQW9CakIsS0FBSyxTQUFDLGNBQWM7c0JBQ3BCLEtBQUssU0FBQyxRQUFROztJQVdqQixpQkFBQztDQUFBLEFBbEhELElBa0hDO1NBeEdZLFVBQVU7OztJQVVyQiw2QkFBeUI7O0lBV3pCLDhCQUEwQjs7Ozs7SUFvQjFCLDRCQUF3Qjs7Ozs7Ozs7Ozs7OztJQXNCeEIsNkJBQXlCOzs7Ozs7Ozs7Ozs7Ozs7SUE2QnpCLCtCQUEwQzs7SUFDMUMseUJBQThCIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAoYykgMjAxNi0yMDE5IFZNd2FyZSwgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogVGhpcyBzb2Z0d2FyZSBpcyByZWxlYXNlZCB1bmRlciBNSVQgbGljZW5zZS5cbiAqIFRoZSBmdWxsIGxpY2Vuc2UgaW5mb3JtYXRpb24gY2FuIGJlIGZvdW5kIGluIExJQ0VOU0UgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgcHJvamVjdC5cbiAqL1xuaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgSG9zdEJpbmRpbmcgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGlzQm9vbGVhbkF0dHJpYnV0ZVNldCB9IGZyb20gJy4uLy4uL3V0aWxzL2NvbXBvbmVudC9pcy1ib29sZWFuLWF0dHJpYnV0ZS1zZXQnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjbHItc3Bpbm5lcicsXG4gIHRlbXBsYXRlOiBgXG4gICAgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxuICBgLFxuICBob3N0OiB7XG4gICAgJ1thdHRyLmFyaWEtbGl2ZV0nOiAnc2V0QXJpYUxpdmUnLFxuICAgICdbYXR0ci5hcmlhLWJ1c3ldJzogJ3RydWUnLFxuICB9LFxufSlcbmV4cG9ydCBjbGFzcyBDbHJTcGlubmVyIHtcbiAgLyoqXG4gICAqIERlZmF1bHQgY2xhc3MgZm9yIGFsbCBzcGlubmVycy4gVGhpcyBjbGFzcyBpcyBhbHdheXMgdHJ1ZVxuICAgKi9cbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5zcGlubmVyJylcbiAgZ2V0IHNwaW5uZXJDbGFzcygpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8vIFN0eWxlXG4gIHByaXZhdGUgX2lubGluZTogYm9vbGVhbjtcbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5zcGlubmVyLWlubGluZScpXG4gIGdldCBpbmxpbmVDbGFzcygpIHtcbiAgICByZXR1cm4gdGhpcy5faW5saW5lO1xuICB9XG5cbiAgQElucHV0KCdjbHJJbmxpbmUnKVxuICBzZXQgY2xySW5saW5lKHZhbHVlOiBib29sZWFuIHwgc3RyaW5nKSB7XG4gICAgdGhpcy5faW5saW5lID0gaXNCb29sZWFuQXR0cmlidXRlU2V0KHZhbHVlKTtcbiAgfVxuXG4gIHByaXZhdGUgX2ludmVyc2U6IGJvb2xlYW47XG4gIEBIb3N0QmluZGluZygnY2xhc3Muc3Bpbm5lci1pbnZlcnNlJylcbiAgZ2V0IGludmVyc2VDbGFzcygpIHtcbiAgICByZXR1cm4gdGhpcy5faW52ZXJzZTtcbiAgfVxuXG4gIEBJbnB1dCgnY2xySW52ZXJzZScpXG4gIHNldCBjbHJJbnZlcnNlKHZhbHVlOiBib29sZWFuIHwgc3RyaW5nKSB7XG4gICAgdGhpcy5faW52ZXJzZSA9IGlzQm9vbGVhbkF0dHJpYnV0ZVNldCh2YWx1ZSk7XG4gIH1cblxuICAvLyBTaXplXG4gIC8qKlxuICAgKiBCeSBkZWZhdWx0IGFsbCBzcGlubmVycyBhcmUgTGFyZ2UuIChzcGlubmVyLWxnKVxuICAgKiBUbyBjaGFuZ2UgdGhlIHNpemUgeW91IG5lZWQgdG8gdXNlIHNldCBjbHJTbWFsbCBvciBjbHJNZWRpdW0gdG8gVFJVRS9cbiAgICovXG5cbiAgLyoqXG4gICAqIFNtYWxsXG4gICAqL1xuICBwcml2YXRlIF9zbWFsbDogYm9vbGVhbjtcbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5zcGlubmVyLXNtJylcbiAgZ2V0IHNtYWxsQ2xhc3MoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3NtYWxsO1xuICB9XG5cbiAgQElucHV0KCdjbHJTbWFsbCcpXG4gIHNldCBjbHJTbWFsbCh2YWx1ZTogYm9vbGVhbiB8IHN0cmluZykge1xuICAgIHRoaXMuX3NtYWxsID0gaXNCb29sZWFuQXR0cmlidXRlU2V0KHZhbHVlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBXaGVuIGNsclNtYWxsICYgY2xyTWVkaXVtIGFyZSBzZXQgYm90aCB0byB0cnVlLlxuICAgKiBUaGUgQ1NTIHdpdGggaGlnaCBwcmlvcml0eSB3aWxsIGJlIHNtYWxsIC0gc28gbWVkaXVtIHNpemUgd2lsbCBiZSBpZ25vcmVkLlxuICAgKlxuICAgKiBGb3IgdGhpcyByZWFzb24gaWYgY2xyU21hbGwgaXMgc2V0IHdlIHdvbid0IGFkZCBjbHJNZWRpdW0gY2xhc3MuXG4gICAqXG4gICAqIE5PVEU6IFRoaXMgaXMgZGljdGF0ZWQgYnkgdGhlIENTUyBydWxlcy5cbiAgICogRE9OJ1QgVVNFIGNsclNtYWxsICYgY2xyTWVkaXVtIHRvIHRvZ2dsZSBjbGFzc2VzLiBUaGlzIGNvdWxkIGNoYW5nZSB3aXRob3V0IG5vdGljZS5cbiAgICpcbiAgICogQWxzbyB0aGVyZSBpcyBubyBsb2dpY2FsIG5lZWQgdG8gaGF2ZSBib3RoIG9mIHRoZW0gc2V0IHRvIFRSVUUgb3IgRkFMU0UuXG4gICAqL1xuICBwcml2YXRlIF9tZWRpdW06IGJvb2xlYW47XG4gIEBIb3N0QmluZGluZygnY2xhc3Muc3Bpbm5lci1tZCcpXG4gIGdldCBtZWRpdW1DbGFzcygpIHtcbiAgICBpZiAodGhpcy5fc21hbGwpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX21lZGl1bTtcbiAgfVxuXG4gIEBJbnB1dCgnY2xyTWVkaXVtJylcbiAgc2V0IGNsck1lZGl1bSh2YWx1ZTogYm9vbGVhbiB8IHN0cmluZykge1xuICAgIHRoaXMuX21lZGl1bSA9IGlzQm9vbGVhbkF0dHJpYnV0ZVNldCh2YWx1ZSk7XG4gIH1cblxuICAvLyBBcmlhIExpdmVcblxuICAvKipcbiAgICogQnkgZGVmYXVsdCBhcmlhLWxpdmUgd2lsbCBiZSBzZXQgdG8gYHBvbGl0ZWAgLlxuICAgKiBUbyBjaGFuZ2UgaXMgaXQgeW91IG5lZWQgdG8gc2V0IGNsckFzc2VydGl2ZSBvciBjbHJPZmYgdG8gVFJVRVxuICAgKlxuICAgKiBUaGVyZSBpcyBwcmlvcml0eTpcbiAgICogICBEZWZhdWx0OiBwb2xpdGVcbiAgICogICBBc2VydGl2ZVxuICAgKiAgIE9mZlxuICAgKlxuICAgKiBJbiBjYXNlIHdoZW4gZm9yIHNvbWUgcmVhc29uIHlvdSBoYXZlIGNsckFzc2VydGl2ZT1UUlVFIGFuZCBjbHJPZmY9VFJVRSxcbiAgICogd2UgZ29ubmEgc2V0IGBhc3NlcnRpdmVgIGFzIHZhbHVlIG9mIGFyaWEtbGl2ZS5cbiAgICpcbiAgICovXG4gIEBJbnB1dCgnY2xyQXNzZXJ0aXZlJykgYXNzZXJ0aXZlOiBib29sZWFuO1xuICBASW5wdXQoJ2Nsck9mZicpIG9mZjogYm9vbGVhbjtcblxuICBnZXQgc2V0QXJpYUxpdmUoKSB7XG4gICAgaWYgKGlzQm9vbGVhbkF0dHJpYnV0ZVNldCh0aGlzLmFzc2VydGl2ZSkpIHtcbiAgICAgIHJldHVybiAnYXNzZXJ0aXZlJztcbiAgICB9XG4gICAgaWYgKGlzQm9vbGVhbkF0dHJpYnV0ZVNldCh0aGlzLm9mZikpIHtcbiAgICAgIHJldHVybiAnb2ZmJztcbiAgICB9XG4gICAgcmV0dXJuICdwb2xpdGUnO1xuICB9XG59XG4iXX0=